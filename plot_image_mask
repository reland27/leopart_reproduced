import torchvision

import numpy as np
import matplotlib.pyplot as plt 

from torchvision.datasets.vision import StandardTransform
from torchvision.transforms import ToTensor, Compose, Resize, Normalize

    imgloader = data_module.val_dataloader()

    #Plotting images and masks as separate figures
    for batch in imgloader:
        imgs, masks = batch  # Unpacking both images and masks from the DataLoader
        imgs = imgs.numpy()
        masks = masks.numpy()
    
    for img, mask in zip(imgs, masks):  # Iterate over pairs of images and masks
        img = np.transpose(img, (1, 2, 0))  # Convert image to (H, W, C) format
        mask = mask.squeeze()  # Remove unnecessary dimensions from mask

        fig, ax = plt.subplots(1, 2, figsize=(12, 6))
        
        # Normalize image for visualization if necessary
        img = (img - img.min()) / (img.max() - img.min())

        ax[0].imshow(img)
        ax[0].set_title("Image")
        
        ax[1].imshow(mask)
        ax[1].set_title("Mask")
        
        plt.show()

    # #Plotting image & mask in one figure
    # for batch in imgloader:
    #     imgs, masks = batch  # Unpacking both images and masks from the DataLoader
    #     imgs = imgs.numpy()
    #     masks = masks.numpy()
    
    # for img, mask in zip(imgs, masks):  # Iterate over pairs of images and masks
    #     img = np.transpose(img, (1, 2, 0))  # Convert image to (H, W, C) format
    #     mask = mask.squeeze()  # Remove unnecessary dimensions from mask

    #     # Normalize image for visualization if necessary
    #     img = (img - img.min()) / (img.max() - img.min())
        
    #     fig, ax = plt.subplots(figsize=(6, 6))
        
    #     ax.imshow(img)  # Display the image
    #     ax.imshow(mask, cmap='jet', alpha=0.5)  # Overlay the mask with lowered transparency
        
    #     # Optional: Hide axis ticks
    #     ax.axis('off')
        
    #     plt.show()

        #plt.savefig(fig_name)